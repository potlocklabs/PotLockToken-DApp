{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gcalb\\\\OneDrive\\\\galboum\\\\My_Projects\\\\CryptoToken\\\\PotLockCoin\\\\potlocktoken-dapp-v2\\\\potlocktoken-dapp-v2\\\\starter-files\\\\src\\\\HelloWorld.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { helloWorldContract, connectWallet, updateMessage, loadCurrentMessage, getCurrentWalletConnected } from \"./util/interact.js\";\nimport alchemylogo from \"./alchemylogo.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HelloWorld = () => {\n  _s();\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n    const {\n      address,\n      status\n    } = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n  }, []);\n  function addSmartContractListener() {//TODO: implement\n  }\n  function addWalletListener() {//TODO: implement\n  }\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n  const onUpdatePressed = async () => {//TODO: implement\n  };\n\n  //the UI of our component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"logo\",\n      src: alchemylogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"walletButton\",\n      onClick: connectWalletPressed,\n      children: walletAddress.length > 0 ? \"Connected: \" + String(walletAddress).substring(0, 6) + \"...\" + String(walletAddress).substring(38) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"50px\"\n      },\n      children: \"Current Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        paddingTop: \"18px\"\n      },\n      children: \"New Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Update the message in your smart contract.\",\n        onChange: e => setNewMessage(e.target.value),\n        value: newMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"publish\",\n        onClick: onUpdatePressed,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(HelloWorld, \"Gq/QBHQMC3uFvf9JJRa28vw0vHw=\");\n_c = HelloWorld;\nexport default HelloWorld;\nvar _c;\n$RefreshReg$(_c, \"HelloWorld\");","map":{"version":3,"names":["React","useEffect","useState","helloWorldContract","connectWallet","updateMessage","loadCurrentMessage","getCurrentWalletConnected","alchemylogo","jsxDEV","_jsxDEV","HelloWorld","_s","walletAddress","setWallet","status","setStatus","message","setMessage","newMessage","setNewMessage","address","addWalletListener","addSmartContractListener","connectWalletPressed","walletResponse","onUpdatePressed","id","children","src","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","String","substring","style","paddingTop","type","placeholder","onChange","e","target","value","_c","$RefreshReg$"],"sources":["C:/Users/gcalb/OneDrive/galboum/My_Projects/CryptoToken/PotLockCoin/potlocktoken-dapp-v2/potlocktoken-dapp-v2/starter-files/src/HelloWorld.js"],"sourcesContent":["import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  helloWorldContract,\r\n  connectWallet,\r\n  updateMessage,\r\n  loadCurrentMessage,\r\n  getCurrentWalletConnected,\r\n} from \"./util/interact.js\";\r\n\r\nimport alchemylogo from \"./alchemylogo.svg\";\r\n\r\nconst HelloWorld = () => {\r\n  //state variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  //called only once\r\n  useEffect(async () => {\r\n    const {address, status} = await getCurrentWalletConnected();\r\n    setWallet(address)\r\n    setStatus(status);\r\n\r\n    addWalletListener();\r\n  }, []);\r\n\r\n  function addSmartContractListener() { //TODO: implement\r\n    \r\n  }\r\n\r\n  function addWalletListener() { //TODO: implement\r\n    \r\n  }\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onUpdatePressed = async () => { //TODO: implement\r\n    \r\n  };\r\n\r\n  //the UI of our component\r\n  return (\r\n    <div id=\"container\">\r\n      <img id=\"logo\" src={alchemylogo}></img>\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\r\n      <p>{message}</p>\r\n\r\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\r\n\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Update the message in your smart contract.\"\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          value={newMessage}\r\n        />\r\n        <p id=\"status\">{status}</p>\r\n\r\n        <button id=\"publish\" onClick={onUpdatePressed}>\r\n          Update\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelloWorld;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}