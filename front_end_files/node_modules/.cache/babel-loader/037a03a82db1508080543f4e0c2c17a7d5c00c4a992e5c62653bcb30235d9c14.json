{"ast":null,"code":"import Web3 from \"web3\";\n\n// Initialize Web3\nconst web3 = new Web3(window.ethereum);\n\n// Replace this with your deployed contract's ABI and address\nconst contractABI = [/* Your contract's ABI goes here */];\nconst contractAddress = \"0x1f6E606B19dDe168145e50f5B37c9E8e3d6F4A24\";\nexport const tokenContract = new web3.eth.Contract(contractABI, contractAddress);\n\n//export const helloWorldContract;\n\nexport const loadCurrentMessage = async () => {};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: \"Must install Metamask\"\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: \"Must install Metamask\"\n    };\n  }\n};\nexport const updateMessage = async (address, message) => {};\n\n// Fetch contract variables\nexport const getContractVariables = async () => {\n  try {\n    const maxTokensPerWallet = await tokenContract.methods.maxTokensPerWallet().call();\n    const sellTimeframe = await tokenContract.methods.sellTimeframe().call();\n    const totalSupply = await tokenContract.methods.totalSupply().call();\n    return {\n      maxTokensPerWallet,\n      sellTimeframe,\n      totalSupply\n    };\n  } catch (err) {\n    console.error(err);\n    return {\n      maxTokensPerWallet: 0,\n      sellTimeframe: 0,\n      totalSupply: 0\n    };\n  }\n};\n\n// Burn tokens\nexport const burnTokens = async amount => {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n  const account = accounts[0];\n  try {\n    const receipt = await tokenContract.methods.burn(amount).send({\n      from: account\n    });\n    return {\n      success: true,\n      receipt\n    };\n  } catch (err) {\n    console.error(err);\n    return {\n      success: false,\n      error: err.message\n    };\n  }\n};\n\n// Listen to contract events\nexport const addContractEventListeners = eventHandlers => {\n  tokenContract.events.WalletChosen({}, eventHandlers.walletChosen);\n  tokenContract.events.TimeframeUpdated({}, eventHandlers.timeframeUpdated);\n  tokenContract.events.HolderListUpdated({}, eventHandlers.holderListUpdated);\n  tokenContract.events.Burn({}, eventHandlers.burn);\n};","map":{"version":3,"names":["Web3","web3","window","ethereum","contractABI","contractAddress","tokenContract","eth","Contract","loadCurrentMessage","connectWallet","addressArray","request","method","obj","status","address","err","message","getCurrentWalletConnected","length","updateMessage","getContractVariables","maxTokensPerWallet","methods","call","sellTimeframe","totalSupply","console","error","burnTokens","amount","accounts","account","receipt","burn","send","from","success","addContractEventListeners","eventHandlers","events","WalletChosen","walletChosen","TimeframeUpdated","timeframeUpdated","HolderListUpdated","holderListUpdated","Burn"],"sources":["C:/Users/gcalb/OneDrive/galboum/My_Projects/CryptoToken/PotLockCoin/potlocktoken-dapp-v2/potlocktoken-dapp-v2/starter-files/src/util/interact.js"],"sourcesContent":["import Web3 from \"web3\";\r\n\r\n// Initialize Web3\r\nconst web3 = new Web3(window.ethereum);\r\n\r\n// Replace this with your deployed contract's ABI and address\r\nconst contractABI = [/* Your contract's ABI goes here */];\r\nconst contractAddress = \"0x1f6E606B19dDe168145e50f5B37c9E8e3d6F4A24\";\r\n\r\nexport const tokenContract = new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n//export const helloWorldContract;\r\n\r\nexport const loadCurrentMessage = async () => { \r\n  \r\n};\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const obj = {\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n          address: addressArray[0],\r\n        };\r\n        return obj;\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\"Must install Metamask\"), \r\n        }; \r\n    } \r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if (addressArray.length > 0) {\r\n          return {\r\n            address: addressArray[0],\r\n            status: \"👆🏽 Write a message in the text-field above.\",\r\n          };\r\n        } else {\r\n          return {\r\n            address: \"\",\r\n            status: \"🦊 Connect to Metamask using the top right button.\",\r\n          };\r\n        }\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\"Must install Metamask\"), \r\n    }; \r\n} \r\n};\r\n\r\nexport const updateMessage = async (address, message) => {\r\n  \r\n};\r\n\r\n// Fetch contract variables\r\nexport const getContractVariables = async () => {\r\n  try {\r\n    const maxTokensPerWallet = await tokenContract.methods.maxTokensPerWallet().call();\r\n    const sellTimeframe = await tokenContract.methods.sellTimeframe().call();\r\n    const totalSupply = await tokenContract.methods.totalSupply().call();\r\n\r\n    return { maxTokensPerWallet, sellTimeframe, totalSupply };\r\n  } catch (err) {\r\n    console.error(err);\r\n    return { maxTokensPerWallet: 0, sellTimeframe: 0, totalSupply: 0 };\r\n  }\r\n};\r\n\r\n// Burn tokens\r\nexport const burnTokens = async (amount) => {\r\n  const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n  const account = accounts[0];\r\n  try {\r\n    const receipt = await tokenContract.methods.burn(amount).send({ from: account });\r\n    return { success: true, receipt };\r\n  } catch (err) {\r\n    console.error(err);\r\n    return { success: false, error: err.message };\r\n  }\r\n};\r\n\r\n// Listen to contract events\r\nexport const addContractEventListeners = (eventHandlers) => {\r\n  tokenContract.events.WalletChosen({}, eventHandlers.walletChosen);\r\n  tokenContract.events.TimeframeUpdated({}, eventHandlers.timeframeUpdated);\r\n  tokenContract.events.HolderListUpdated({}, eventHandlers.holderListUpdated);\r\n  tokenContract.events.Burn({}, eventHandlers.burn);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}