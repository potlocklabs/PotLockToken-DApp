{"ast":null,"code":"import Web3 from \"web3\";\nimport abi from \"./contractABI.json\"; // Replace with your contract's ABI JSON file\n\nconst CONTRACT_ADDRESS = \"0xYourContractAddressHere\"; // Replace with your contract's address\n\nlet web3;\nlet tokenContract;\n\n// Initialize Web3 and contract\nif (window.ethereum) {\n  web3 = new Web3(window.ethereum);\n  tokenContract = new web3.eth.Contract(abi, CONTRACT_ADDRESS);\n}\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      return {\n        address: addressArray[0],\n        status: \"Wallet connected.\"\n      };\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"ðŸ˜¥ \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: \"Metamask is not installed.\"\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"Wallet connected.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"ðŸ¦Š Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"ðŸ˜¥ \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: \"Metamask is not installed.\"\n    };\n  }\n};\nexport const getContractVariables = async () => {\n  try {\n    const maxTokensPerWallet = await tokenContract.methods.maxTokensPerWallet().call();\n    const sellTimeframe = await tokenContract.methods.sellTimeframe().call();\n    const totalSupply = await tokenContract.methods.totalSupply().call();\n    return {\n      maxTokensPerWallet,\n      sellTimeframe,\n      totalSupply\n    };\n  } catch (error) {\n    console.error(\"Error fetching contract variables:\", error);\n    return {\n      maxTokensPerWallet: 0,\n      sellTimeframe: 0,\n      totalSupply: 0\n    };\n  }\n};\nexport const burnTokens = async amount => {\n  try {\n    const accounts = await window.ethereum.request({\n      method: \"eth_accounts\"\n    });\n    const fromAddress = accounts[0];\n    const receipt = await tokenContract.methods.burn(web3.utils.toWei(amount, \"ether\")).send({\n      from: fromAddress\n    });\n    console.log(\"Burn transaction receipt:\", receipt);\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error(\"Error burning tokens:\", error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nexport const addContractEventListeners = listeners => {\n  if (!tokenContract) return;\n  if (listeners.walletChosen) {\n    tokenContract.events.WalletChosen().on(\"data\", listeners.walletChosen).on(\"error\", console.error);\n  }\n  if (listeners.timeframeUpdated) {\n    tokenContract.events.TimeframeUpdated().on(\"data\", listeners.timeframeUpdated).on(\"error\", console.error);\n  }\n  if (listeners.holderListUpdated) {\n    tokenContract.events.HolderListUpdated().on(\"data\", listeners.holderListUpdated).on(\"error\", console.error);\n  }\n  if (listeners.burn) {\n    tokenContract.events.Burn().on(\"data\", listeners.burn).on(\"error\", console.error);\n  }\n};\nexport { tokenContract };","map":{"version":3,"names":["Web3","abi","CONTRACT_ADDRESS","web3","tokenContract","window","ethereum","eth","Contract","connectWallet","addressArray","request","method","address","status","err","message","getCurrentWalletConnected","length","getContractVariables","maxTokensPerWallet","methods","call","sellTimeframe","totalSupply","error","console","burnTokens","amount","accounts","fromAddress","receipt","burn","utils","toWei","send","from","log","success","addContractEventListeners","listeners","walletChosen","events","WalletChosen","on","timeframeUpdated","TimeframeUpdated","holderListUpdated","HolderListUpdated","Burn"],"sources":["C:/Users/gcalb/OneDrive/galboum/My_Projects/CryptoToken/PotLockCoin/potlocktoken-dapp-v2/potlocktoken-dapp-v2/starter-files/src/util/interact.js"],"sourcesContent":["import Web3 from \"web3\";\r\nimport abi from \"./contractABI.json\"; // Replace with your contract's ABI JSON file\r\n\r\nconst CONTRACT_ADDRESS = \"0xYourContractAddressHere\"; // Replace with your contract's address\r\n\r\nlet web3;\r\nlet tokenContract;\r\n\r\n// Initialize Web3 and contract\r\nif (window.ethereum) {\r\n  web3 = new Web3(window.ethereum);\r\n  tokenContract = new web3.eth.Contract(abi, CONTRACT_ADDRESS);\r\n}\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      return {\r\n        address: addressArray[0],\r\n        status: \"Wallet connected.\",\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"ðŸ˜¥ \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: \"Metamask is not installed.\",\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"Wallet connected.\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"ðŸ¦Š Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"ðŸ˜¥ \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: \"Metamask is not installed.\",\r\n    };\r\n  }\r\n};\r\n\r\nexport const getContractVariables = async () => {\r\n  try {\r\n    const maxTokensPerWallet = await tokenContract.methods.maxTokensPerWallet().call();\r\n    const sellTimeframe = await tokenContract.methods.sellTimeframe().call();\r\n    const totalSupply = await tokenContract.methods.totalSupply().call();\r\n    return { maxTokensPerWallet, sellTimeframe, totalSupply };\r\n  } catch (error) {\r\n    console.error(\"Error fetching contract variables:\", error);\r\n    return { maxTokensPerWallet: 0, sellTimeframe: 0, totalSupply: 0 };\r\n  }\r\n};\r\n\r\nexport const burnTokens = async (amount) => {\r\n  try {\r\n    const accounts = await window.ethereum.request({ method: \"eth_accounts\" });\r\n    const fromAddress = accounts[0];\r\n\r\n    const receipt = await tokenContract.methods.burn(web3.utils.toWei(amount, \"ether\")).send({\r\n      from: fromAddress,\r\n    });\r\n\r\n    console.log(\"Burn transaction receipt:\", receipt);\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error(\"Error burning tokens:\", error);\r\n    return { success: false, error: error.message };\r\n  }\r\n};\r\n\r\nexport const addContractEventListeners = (listeners) => {\r\n  if (!tokenContract) return;\r\n\r\n  if (listeners.walletChosen) {\r\n    tokenContract.events.WalletChosen().on(\"data\", listeners.walletChosen).on(\"error\", console.error);\r\n  }\r\n\r\n  if (listeners.timeframeUpdated) {\r\n    tokenContract.events.TimeframeUpdated().on(\"data\", listeners.timeframeUpdated).on(\"error\", console.error);\r\n  }\r\n\r\n  if (listeners.holderListUpdated) {\r\n    tokenContract.events.HolderListUpdated().on(\"data\", listeners.holderListUpdated).on(\"error\", console.error);\r\n  }\r\n\r\n  if (listeners.burn) {\r\n    tokenContract.events.Burn().on(\"data\", listeners.burn).on(\"error\", console.error);\r\n  }\r\n};\r\n\r\nexport { tokenContract };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}