{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expand_message_xmd = expand_message_xmd;\nexports.expand_message_xof = expand_message_xof;\nexports.hash_to_field = hash_to_field;\nexports.isogenyMap = isogenyMap;\nexports.createHasher = createHasher;\nconst modular_js_1 = require(\"./modular.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = utils_js_1.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n  if (value < 0 || value >= 1 << 8 * length) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({\n    length\n  }).fill(0);\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\nfunction anum(item) {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n  (0, utils_js_1.abytes)(msg);\n  (0, utils_js_1.abytes)(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n  const {\n    outputLen: b_in_bytes,\n    blockLen: r_in_bytes\n  } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array(ell);\n  const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H((0, utils_js_1.concatBytes)(...args));\n  }\n  const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n  (0, utils_js_1.abytes)(msg);\n  (0, utils_js_1.abytes)(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil(2 * k / 8);\n    DST = H.create({\n      dkLen\n    }).update((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255) throw new Error('expand_message_xof: invalid lenInBytes');\n  return H.create({\n    dkLen: lenInBytes\n  }).update(msg).update(i2osp(lenInBytes, 2))\n  // 2. DST_prime = DST || I2OSP(len(DST), 1)\n  .update(DST).update(i2osp(DST.length, 1)).digest();\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n  (0, utils_js_1.validateObject)(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash'\n  });\n  const {\n    p,\n    k,\n    m,\n    hash,\n    expand,\n    DST: _DST\n  } = options;\n  (0, utils_js_1.abytes)(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? (0, utils_js_1.utf8ToBytes)(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = (0, modular_js_1.mod)(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\nfunction isogenyMap(field, map) {\n  // Make same order as in spec\n  const COEFF = map.map(i => Array.from(i).reverse());\n  return (x, y) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map(val => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return {\n      x,\n      y\n    };\n  };\n}\nfunction createHasher(Point, mapToCurve, def) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg, options) {\n      const u = hash_to_field(msg, 2, {\n        ...def,\n        DST: def.DST,\n        ...options\n      });\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg, options) {\n      const u = hash_to_field(msg, 1, {\n        ...def,\n        DST: def.encodeDST,\n        ...options\n      });\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // Same as encodeToCurve, but without hash\n    mapToCurve(scalars) {\n      if (!Array.isArray(scalars)) throw new Error('mapToCurve: expected array of bigints');\n      for (const i of scalars) if (typeof i !== 'bigint') throw new Error(`mapToCurve: expected array of bigints, got ${i} in array`);\n      const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n      P.assertValidity();\n      return P;\n    }\n  };\n}","map":{"version":3,"names":["exports","expand_message_xmd","expand_message_xof","hash_to_field","isogenyMap","createHasher","modular_js_1","require","utils_js_1","os2ip","bytesToNumberBE","i2osp","value","length","Error","res","Array","from","fill","i","Uint8Array","strxor","a","b","arr","anum","item","Number","isSafeInteger","msg","DST","lenInBytes","H","abytes","concatBytes","utf8ToBytes","outputLen","b_in_bytes","blockLen","r_in_bytes","ell","Math","ceil","DST_prime","Z_pad","l_i_b_str","b_0","args","pseudo_random_bytes","slice","k","dkLen","create","update","digest","count","options","validateObject","p","m","hash","expand","_DST","log2p","toString","L","len_in_bytes","prb","u","e","j","elm_offset","tv","subarray","mod","field","map","COEFF","reverse","x","y","xNum","xDen","yNum","yDen","val","reduce","acc","add","mul","div","Point","mapToCurve","def","hashToCurve","u0","fromAffine","u1","P","clearCofactor","assertValidity","encodeToCurve","encodeDST","scalars","isArray"],"sources":["C:\\Users\\gcalb\\OneDrive\\galboum\\My_Projects\\CryptoToken\\PotLockCoin\\potlocktoken-dapp-v2\\potlocktoken-dapp-v2\\starter-files\\node_modules\\@noble\\curves\\src\\abstract\\hash-to-curve.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { AffinePoint, Group, GroupConstructor } from './curve.js';\nimport { IField, mod } from './modular.js';\nimport type { CHash } from './utils.js';\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // Same as encodeToCurve, but without hash\n    mapToCurve(scalars: bigint[]) {\n      if (!Array.isArray(scalars)) throw new Error('mapToCurve: expected array of bigints');\n      for (const i of scalars)\n        if (typeof i !== 'bigint')\n          throw new Error(`mapToCurve: expected array of bigints, got ${i} in array`);\n      const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}