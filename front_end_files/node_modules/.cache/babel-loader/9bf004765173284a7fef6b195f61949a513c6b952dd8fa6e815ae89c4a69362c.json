{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertNever = assertNever;\n/**\n * Helper function for exhaustive checks of discriminated unions.\n * https://basarat.gitbooks.io/typescript/docs/types/discriminated-unions.html\n *\n * @example\n *\n *    type A = {type: 'a'};\n *    type B = {type: 'b'};\n *    type Union = A | B;\n *\n *    function doSomething(arg: Union) {\n *      if (arg.type === 'a') {\n *        return something;\n *      }\n *\n *      if (arg.type === 'b') {\n *        return somethingElse;\n *      }\n *\n *      // TS will error if there are other types in the union\n *      // Will throw an Error when called at runtime.\n *      // Use `assertNever(arg, true)` instead to fail silently.\n *      return assertNever(arg);\n *    }\n */\nfunction assertNever(value, errorMessageOrNoThrow) {\n  if (typeof errorMessageOrNoThrow === 'string') {\n    throw new Error(errorMessageOrNoThrow);\n  }\n  if (typeof errorMessageOrNoThrow === 'function') {\n    throw new Error(errorMessageOrNoThrow(value));\n  }\n  if (errorMessageOrNoThrow) {\n    return value;\n  }\n  throw new Error(\"Unhandled discriminated union member: \".concat(JSON.stringify(value)));\n}\nexports.default = assertNever;","map":{"version":3,"names":["Object","defineProperty","exports","value","assertNever","errorMessageOrNoThrow","Error","concat","JSON","stringify","default"],"sources":["C:/Users/gcalb/OneDrive/galboum/My_Projects/CryptoToken/PotLockCoin/potlocktoken-dapp-v2/potlocktoken-dapp-v2/starter-files/node_modules/assert-never/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertNever = assertNever;\n/**\n * Helper function for exhaustive checks of discriminated unions.\n * https://basarat.gitbooks.io/typescript/docs/types/discriminated-unions.html\n *\n * @example\n *\n *    type A = {type: 'a'};\n *    type B = {type: 'b'};\n *    type Union = A | B;\n *\n *    function doSomething(arg: Union) {\n *      if (arg.type === 'a') {\n *        return something;\n *      }\n *\n *      if (arg.type === 'b') {\n *        return somethingElse;\n *      }\n *\n *      // TS will error if there are other types in the union\n *      // Will throw an Error when called at runtime.\n *      // Use `assertNever(arg, true)` instead to fail silently.\n *      return assertNever(arg);\n *    }\n */\nfunction assertNever(value, errorMessageOrNoThrow) {\n    if (typeof errorMessageOrNoThrow === 'string') {\n        throw new Error(errorMessageOrNoThrow);\n    }\n    if (typeof errorMessageOrNoThrow === 'function') {\n        throw new Error(errorMessageOrNoThrow(value));\n    }\n    if (errorMessageOrNoThrow) {\n        return value;\n    }\n    throw new Error(\"Unhandled discriminated union member: \".concat(JSON.stringify(value)));\n}\nexports.default = assertNever;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAGA,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAWA,CAACD,KAAK,EAAEE,qBAAqB,EAAE;EAC/C,IAAI,OAAOA,qBAAqB,KAAK,QAAQ,EAAE;IAC3C,MAAM,IAAIC,KAAK,CAACD,qBAAqB,CAAC;EAC1C;EACA,IAAI,OAAOA,qBAAqB,KAAK,UAAU,EAAE;IAC7C,MAAM,IAAIC,KAAK,CAACD,qBAAqB,CAACF,KAAK,CAAC,CAAC;EACjD;EACA,IAAIE,qBAAqB,EAAE;IACvB,OAAOF,KAAK;EAChB;EACA,MAAM,IAAIG,KAAK,CAAC,wCAAwC,CAACC,MAAM,CAACC,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC,CAAC,CAAC;AAC3F;AACAD,OAAO,CAACQ,OAAO,GAAGN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}